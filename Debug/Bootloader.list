
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fbc  08002fbc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fc4  08002fc4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000205c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002070  20002070  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c77  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b32  00000000  00000000  00029cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  0002b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000760  00000000  00000000  0002bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f751  00000000  00000000  0002c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000998c  00000000  00000000  0004be99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bef1a  00000000  00000000  00055825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011473f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f64  00000000  00000000  00114794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f8c 	.word	0x08002f8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002f8c 	.word	0x08002f8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

void runApplication();
void EraseApplicationArea( void );
void ProgramAplicationAreaBlock(uint32_t address, uint32_t * data, uint32_t count );
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c6:	f000 fb25 	bl	8000b14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ca:	f000 f979 	bl	80007c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ce:	f000 fa0b 	bl	80008e8 <MX_GPIO_Init>
	MX_UART4_Init();
 80004d2:	f000 f9df 	bl	8000894 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart4, rxData, 1);
 80004d6:	2201      	movs	r2, #1
 80004d8:	4913      	ldr	r1, [pc, #76]	; (8000528 <main+0x68>)
 80004da:	4814      	ldr	r0, [pc, #80]	; (800052c <main+0x6c>)
 80004dc:	f001 fe41 	bl	8002162 <HAL_UART_Receive_IT>

	HAL_Delay(100);
 80004e0:	2064      	movs	r0, #100	; 0x64
 80004e2:	f000 fb89 	bl	8000bf8 <HAL_Delay>
	txData[0] = XMODEM_NAK;
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <main+0x70>)
 80004e8:	2215      	movs	r2, #21
 80004ea:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, txData, 1, 100);
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	2201      	movs	r2, #1
 80004f0:	490f      	ldr	r1, [pc, #60]	; (8000530 <main+0x70>)
 80004f2:	480e      	ldr	r0, [pc, #56]	; (800052c <main+0x6c>)
 80004f4:	f001 fda3 	bl	800203e <HAL_UART_Transmit>
	/* USER CODE END 2 */
	uint32_t _t = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	607b      	str	r3, [r7, #4]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		if(HAL_GetTick() - _t > 10)
 80004fc:	f000 fb70 	bl	8000be0 <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	2b0a      	cmp	r3, #10
 8000508:	d907      	bls.n	800051a <main+0x5a>
		{
			bootloaderDelay -= 10;
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <main+0x74>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	3b0a      	subs	r3, #10
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <main+0x74>)
 8000512:	6013      	str	r3, [r2, #0]
			_t = HAL_GetTick();
 8000514:	f000 fb64 	bl	8000be0 <HAL_GetTick>
 8000518:	6078      	str	r0, [r7, #4]
		}

		if(bootloaderDelay < 10)
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <main+0x74>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b09      	cmp	r3, #9
 8000520:	d8ec      	bhi.n	80004fc <main+0x3c>
		{
			runApplication();
 8000522:	f000 f835 	bl	8000590 <runApplication>
		if(HAL_GetTick() - _t > 10)
 8000526:	e7e9      	b.n	80004fc <main+0x3c>
 8000528:	20000034 	.word	0x20000034
 800052c:	20002000 	.word	0x20002000
 8000530:	20000038 	.word	0x20000038
 8000534:	20000000 	.word	0x20000000

08000538 <EraseApplicationArea>:
	}
	/* USER CODE END 3 */
}

void EraseApplicationArea( void )
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
    //unlock flash
    HAL_FLASH_Unlock();
 800053c:	f000 fd78 	bl	8001030 <HAL_FLASH_Unlock>

    FLASH_Erase_Sector( FLASH_SECTOR_3, VOLTAGE_RANGE_3 );
 8000540:	2102      	movs	r1, #2
 8000542:	2003      	movs	r0, #3
 8000544:	f000 fed6 	bl	80012f4 <FLASH_Erase_Sector>
    FLASH_Erase_Sector( FLASH_SECTOR_4, VOLTAGE_RANGE_3 );
 8000548:	2102      	movs	r1, #2
 800054a:	2004      	movs	r0, #4
 800054c:	f000 fed2 	bl	80012f4 <FLASH_Erase_Sector>
    FLASH_Erase_Sector( FLASH_SECTOR_5, VOLTAGE_RANGE_3 );
 8000550:	2102      	movs	r1, #2
 8000552:	2005      	movs	r0, #5
 8000554:	f000 fece 	bl	80012f4 <FLASH_Erase_Sector>
    FLASH_Erase_Sector( FLASH_SECTOR_6, VOLTAGE_RANGE_3 );
 8000558:	2102      	movs	r1, #2
 800055a:	2006      	movs	r0, #6
 800055c:	f000 feca 	bl	80012f4 <FLASH_Erase_Sector>
    FLASH_Erase_Sector( FLASH_SECTOR_7, VOLTAGE_RANGE_3 );
 8000560:	2102      	movs	r1, #2
 8000562:	2007      	movs	r0, #7
 8000564:	f000 fec6 	bl	80012f4 <FLASH_Erase_Sector>
    FLASH_Erase_Sector( FLASH_SECTOR_8, VOLTAGE_RANGE_3 );
 8000568:	2102      	movs	r1, #2
 800056a:	2008      	movs	r0, #8
 800056c:	f000 fec2 	bl	80012f4 <FLASH_Erase_Sector>
    FLASH_Erase_Sector( FLASH_SECTOR_9, VOLTAGE_RANGE_3 );
 8000570:	2102      	movs	r1, #2
 8000572:	2009      	movs	r0, #9
 8000574:	f000 febe 	bl	80012f4 <FLASH_Erase_Sector>
    FLASH_Erase_Sector( FLASH_SECTOR_10, VOLTAGE_RANGE_3 );
 8000578:	2102      	movs	r1, #2
 800057a:	200a      	movs	r0, #10
 800057c:	f000 feba 	bl	80012f4 <FLASH_Erase_Sector>
    FLASH_Erase_Sector( FLASH_SECTOR_11, VOLTAGE_RANGE_3 );
 8000580:	2102      	movs	r1, #2
 8000582:	200b      	movs	r0, #11
 8000584:	f000 feb6 	bl	80012f4 <FLASH_Erase_Sector>

    //lock flash
    HAL_FLASH_Lock();
 8000588:	f000 fd74 	bl	8001074 <HAL_FLASH_Lock>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <runApplication>:

void runApplication()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0

	pFunction Jump_To_Application = *( (pFunction*) ( APPLICATION_START_ADDRESS + 4 ) );
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <runApplication+0x40>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f383 8814 	msr	CONTROL, r3
}
 80005a6:	bf00      	nop

	__set_CONTROL( 0 );

	SysTick->CTRL = 0; //disable SysTick
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <runApplication+0x44>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]

	SCB->VTOR = APPLICATION_START_ADDRESS;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <runApplication+0x48>)
 80005b0:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <runApplication+0x4c>)
 80005b2:	609a      	str	r2, [r3, #8]

	/* Initialize user application's Stack Pointer */
	__set_MSP( *( (uint32_t*) APPLICATION_START_ADDRESS ) );
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <runApplication+0x4c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	f383 8808 	msr	MSP, r3
}
 80005c0:	bf00      	nop

	Jump_To_Application();
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	4798      	blx	r3
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	0800c004 	.word	0x0800c004
 80005d4:	e000e010 	.word	0xe000e010
 80005d8:	e000ed00 	.word	0xe000ed00
 80005dc:	0800c000 	.word	0x0800c000

080005e0 <ProgramAplicationAreaBlock>:

void ProgramAplicationAreaBlock(uint32_t address, uint32_t * data, uint32_t count ){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	uint32_t i;

	if(address<APPLICATION_START_ADDRESS) return;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <ProgramAplicationAreaBlock+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d31c      	bcc.n	800062e <ProgramAplicationAreaBlock+0x4e>

	//unlock flash
	HAL_FLASH_Unlock();
 80005f4:	f000 fd1c 	bl	8001030 <HAL_FLASH_Unlock>

	for(i=0;i<count;i++){
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	e010      	b.n	8000620 <ProgramAplicationAreaBlock+0x40>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1d1a      	adds	r2, r3, #4
 8000602:	60ba      	str	r2, [r7, #8]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	68f9      	ldr	r1, [r7, #12]
 800060e:	2002      	movs	r0, #2
 8000610:	f000 fcba 	bl	8000f88 <HAL_FLASH_Program>
		address+=sizeof(uint32_t);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3304      	adds	r3, #4
 8000618:	60fb      	str	r3, [r7, #12]
	for(i=0;i<count;i++){
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	d3ea      	bcc.n	80005fe <ProgramAplicationAreaBlock+0x1e>
	}
	//lock flash
	HAL_FLASH_Lock();
 8000628:	f000 fd24 	bl	8001074 <HAL_FLASH_Lock>
 800062c:	e000      	b.n	8000630 <ProgramAplicationAreaBlock+0x50>
	if(address<APPLICATION_START_ADDRESS) return;
 800062e:	bf00      	nop
}
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	0800c000 	.word	0x0800c000

0800063c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(huart, rxData, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	4953      	ldr	r1, [pc, #332]	; (8000794 <HAL_UART_RxCpltCallback+0x158>)
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f001 fd8a 	bl	8002162 <HAL_UART_Receive_IT>
	switch( xModemState )
 800064e:	4b52      	ldr	r3, [pc, #328]	; (8000798 <HAL_UART_RxCpltCallback+0x15c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b04      	cmp	r3, #4
 8000654:	f200 809a 	bhi.w	800078c <HAL_UART_RxCpltCallback+0x150>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <HAL_UART_RxCpltCallback+0x24>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000675 	.word	0x08000675
 8000664:	080006a7 	.word	0x080006a7
 8000668:	080006b7 	.word	0x080006b7
 800066c:	080006db 	.word	0x080006db
 8000670:	08000711 	.word	0x08000711
	{
	case IDLE :
		if( XMODEM_SOH == rxData[0] )
 8000674:	4b47      	ldr	r3, [pc, #284]	; (8000794 <HAL_UART_RxCpltCallback+0x158>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d103      	bne.n	8000684 <HAL_UART_RxCpltCallback+0x48>
		{
			xModemState = SOH_RECEIVED;
 800067c:	4b46      	ldr	r3, [pc, #280]	; (8000798 <HAL_UART_RxCpltCallback+0x15c>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
			txData[0] = XMODEM_ACK;
			HAL_UART_Transmit(huart, txData, 1, 100);
			//run application after 100ms
			bootloaderDelay = 100;
		}
		break;
 8000682:	e07e      	b.n	8000782 <HAL_UART_RxCpltCallback+0x146>
		else if( XMODEM_EOT == rxData[0] )
 8000684:	4b43      	ldr	r3, [pc, #268]	; (8000794 <HAL_UART_RxCpltCallback+0x158>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b04      	cmp	r3, #4
 800068a:	d17a      	bne.n	8000782 <HAL_UART_RxCpltCallback+0x146>
			txData[0] = XMODEM_ACK;
 800068c:	4b43      	ldr	r3, [pc, #268]	; (800079c <HAL_UART_RxCpltCallback+0x160>)
 800068e:	2206      	movs	r2, #6
 8000690:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, txData, 1, 100);
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	2201      	movs	r2, #1
 8000696:	4941      	ldr	r1, [pc, #260]	; (800079c <HAL_UART_RxCpltCallback+0x160>)
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f001 fcd0 	bl	800203e <HAL_UART_Transmit>
			bootloaderDelay = 100;
 800069e:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <HAL_UART_RxCpltCallback+0x164>)
 80006a0:	2264      	movs	r2, #100	; 0x64
 80006a2:	601a      	str	r2, [r3, #0]
		break;
 80006a4:	e06d      	b.n	8000782 <HAL_UART_RxCpltCallback+0x146>
	case SOH_RECEIVED :
		packetNumber = rxData[0];
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_UART_RxCpltCallback+0x158>)
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <HAL_UART_RxCpltCallback+0x168>)
 80006ac:	701a      	strb	r2, [r3, #0]
		xModemState = PN1_RECEIVED;
 80006ae:	4b3a      	ldr	r3, [pc, #232]	; (8000798 <HAL_UART_RxCpltCallback+0x15c>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	701a      	strb	r2, [r3, #0]
		break;
 80006b4:	e06a      	b.n	800078c <HAL_UART_RxCpltCallback+0x150>
	case PN1_RECEIVED :
		if( ( 255 - packetNumber ) == rxData[0] )
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <HAL_UART_RxCpltCallback+0x168>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80006be:	4a35      	ldr	r2, [pc, #212]	; (8000794 <HAL_UART_RxCpltCallback+0x158>)
 80006c0:	7812      	ldrb	r2, [r2, #0]
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d15f      	bne.n	8000786 <HAL_UART_RxCpltCallback+0x14a>
		{
			xModemState = PN2_RECEIVED;
 80006c6:	4b34      	ldr	r3, [pc, #208]	; (8000798 <HAL_UART_RxCpltCallback+0x15c>)
 80006c8:	2203      	movs	r2, #3
 80006ca:	701a      	strb	r2, [r3, #0]
			dataIndex = 0;
 80006cc:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <HAL_UART_RxCpltCallback+0x16c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	801a      	strh	r2, [r3, #0]
			checksum = 0;
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <HAL_UART_RxCpltCallback+0x170>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			//ToDo: send XMODEM_CAN response
		}
		break;
 80006d8:	e055      	b.n	8000786 <HAL_UART_RxCpltCallback+0x14a>
	case PN2_RECEIVED :
		dataBuffer[dataIndex++] = rxData[0];
 80006da:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <HAL_UART_RxCpltCallback+0x16c>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	b291      	uxth	r1, r2
 80006e2:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <HAL_UART_RxCpltCallback+0x16c>)
 80006e4:	8011      	strh	r1, [r2, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_UART_RxCpltCallback+0x158>)
 80006ea:	7819      	ldrb	r1, [r3, #0]
 80006ec:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <HAL_UART_RxCpltCallback+0x174>)
 80006ee:	5499      	strb	r1, [r3, r2]
		checksum += rxData[0];
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <HAL_UART_RxCpltCallback+0x158>)
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <HAL_UART_RxCpltCallback+0x170>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <HAL_UART_RxCpltCallback+0x170>)
 80006fe:	701a      	strb	r2, [r3, #0]
		if( dataIndex >= XMODEM_DATA_LENGTH )
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <HAL_UART_RxCpltCallback+0x16c>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	2b7f      	cmp	r3, #127	; 0x7f
 8000706:	d940      	bls.n	800078a <HAL_UART_RxCpltCallback+0x14e>
		{
			xModemState = DATA_RECEIVED;
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <HAL_UART_RxCpltCallback+0x15c>)
 800070a:	2204      	movs	r2, #4
 800070c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800070e:	e03c      	b.n	800078a <HAL_UART_RxCpltCallback+0x14e>
	case DATA_RECEIVED :
		if( checksum == rxData[0] )
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <HAL_UART_RxCpltCallback+0x158>)
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <HAL_UART_RxCpltCallback+0x170>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d125      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x12c>
		{
			//frame received successfully
			if( firstFrame )
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <HAL_UART_RxCpltCallback+0x178>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d007      	beq.n	8000734 <HAL_UART_RxCpltCallback+0xf8>
			{
				EraseApplicationArea();
 8000724:	f7ff ff08 	bl	8000538 <EraseApplicationArea>
				firstFrame = 0;
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <HAL_UART_RxCpltCallback+0x178>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
				currentProgramAddress = APPLICATION_START_ADDRESS;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <HAL_UART_RxCpltCallback+0x17c>)
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <HAL_UART_RxCpltCallback+0x180>)
 8000732:	601a      	str	r2, [r3, #0]
			}

			//ToDo: write to flash
			ProgramAplicationAreaBlock( currentProgramAddress, (uint32_t *)dataBuffer, sizeof(dataBuffer)/sizeof(uint32_t) );
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <HAL_UART_RxCpltCallback+0x17c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2220      	movs	r2, #32
 800073a:	491d      	ldr	r1, [pc, #116]	; (80007b0 <HAL_UART_RxCpltCallback+0x174>)
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff4f 	bl	80005e0 <ProgramAplicationAreaBlock>

			currentProgramAddress += sizeof(dataBuffer);
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_UART_RxCpltCallback+0x17c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3380      	adds	r3, #128	; 0x80
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <HAL_UART_RxCpltCallback+0x17c>)
 800074a:	6013      	str	r3, [r2, #0]

			txData[0] = XMODEM_ACK;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <HAL_UART_RxCpltCallback+0x160>)
 800074e:	2206      	movs	r2, #6
 8000750:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, txData, 1, 100);
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	2201      	movs	r2, #1
 8000756:	4911      	ldr	r1, [pc, #68]	; (800079c <HAL_UART_RxCpltCallback+0x160>)
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f001 fc70 	bl	800203e <HAL_UART_Transmit>

			bootloaderDelay = 1000;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_UART_RxCpltCallback+0x164>)
 8000760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	e008      	b.n	800077a <HAL_UART_RxCpltCallback+0x13e>
		}
		else
		{
			txData[0] = XMODEM_NAK;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_UART_RxCpltCallback+0x160>)
 800076a:	2215      	movs	r2, #21
 800076c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, txData, 1, 100);
 800076e:	2364      	movs	r3, #100	; 0x64
 8000770:	2201      	movs	r2, #1
 8000772:	490a      	ldr	r1, [pc, #40]	; (800079c <HAL_UART_RxCpltCallback+0x160>)
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f001 fc62 	bl	800203e <HAL_UART_Transmit>
		}
		xModemState = IDLE;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_UART_RxCpltCallback+0x15c>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
		break;
 8000780:	e004      	b.n	800078c <HAL_UART_RxCpltCallback+0x150>
		break;
 8000782:	bf00      	nop
 8000784:	e002      	b.n	800078c <HAL_UART_RxCpltCallback+0x150>
		break;
 8000786:	bf00      	nop
 8000788:	e000      	b.n	800078c <HAL_UART_RxCpltCallback+0x150>
		break;
 800078a:	bf00      	nop
	}
	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
	 */
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000034 	.word	0x20000034
 8000798:	20000030 	.word	0x20000030
 800079c:	20000038 	.word	0x20000038
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20001f7c 	.word	0x20001f7c
 80007a8:	2000003a 	.word	0x2000003a
 80007ac:	20002044 	.word	0x20002044
 80007b0:	20001f80 	.word	0x20001f80
 80007b4:	20000004 	.word	0x20000004
 80007b8:	20002048 	.word	0x20002048
 80007bc:	0800c000 	.word	0x0800c000

080007c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fbd4 	bl	8002f7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a27      	ldr	r2, [pc, #156]	; (800088c <SystemClock_Config+0xcc>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <SystemClock_Config+0xcc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <SystemClock_Config+0xd0>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <SystemClock_Config+0xd0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000834:	23a8      	movs	r3, #168	; 0xa8
 8000836:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800083c:	2304      	movs	r3, #4
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f000 ff39 	bl	80016bc <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000850:	f000 f872 	bl	8000938 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2302      	movs	r3, #2
 800085a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000860:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000864:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2105      	movs	r1, #5
 8000872:	4618      	mov	r0, r3
 8000874:	f001 f99a 	bl	8001bac <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800087e:	f000 f85b 	bl	8000938 <Error_Handler>
	}
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_UART4_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_UART4_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_UART4_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_UART4_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_UART4_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_UART4_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_UART4_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_UART4_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_UART4_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_UART4_Init+0x4c>)
 80008cc:	f001 fb6a 	bl	8001fa4 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_UART4_Init+0x46>
	{
		Error_Handler();
 80008d6:	f000 f82f 	bl	8000938 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20002000 	.word	0x20002000
 80008e4:	40004c00 	.word	0x40004c00

080008e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_GPIO_Init+0x4c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_GPIO_Init+0x4c>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_GPIO_Init+0x4c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_GPIO_Init+0x4c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <MX_GPIO_Init+0x4c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_GPIO_Init+0x4c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_UART_MspInit+0x94>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d133      	bne.n	8000a1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ee:	2303      	movs	r3, #3
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009fe:	2308      	movs	r3, #8
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <HAL_UART_MspInit+0x9c>)
 8000a0a:	f000 fcbb 	bl	8001384 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2034      	movs	r0, #52	; 0x34
 8000a14:	f000 f9ef 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a18:	2034      	movs	r0, #52	; 0x34
 8000a1a:	f000 fa08 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40004c00 	.word	0x40004c00
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f89a 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <UART4_IRQHandler+0x10>)
 8000a8e:	f001 fb99 	bl	80021c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20002000 	.word	0x20002000

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000adc:	4c0b      	ldr	r4, [pc, #44]	; (8000b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aea:	f7ff ffd7 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 fa21 	bl	8002f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fce5 	bl	80004c0 <main>
  bx  lr    
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b04:	08002fcc 	.word	0x08002fcc
  ldr r2, =_sbss
 8000b08:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b0c:	20002070 	.word	0x20002070

08000b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_Init+0x40>)
 8000b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_Init+0x40>)
 8000b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x40>)
 8000b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f94f 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fefc 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023c00 	.word	0x40023c00

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f967 	bl	8000e4a <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f92f 	bl	8000df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	2000000c 	.word	0x2000000c

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000010 	.word	0x20000010
 8000bdc:	2000204c 	.word	0x2000204c

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	2000204c 	.word	0x2000204c

08000bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c00:	f7ff ffee 	bl	8000be0 <HAL_GetTick>
 8000c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c10:	d005      	beq.n	8000c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_Delay+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c1e:	bf00      	nop
 8000c20:	f7ff ffde 	bl	8000be0 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d8f7      	bhi.n	8000c20 <HAL_Delay+0x28>
  {
  }
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000010 	.word	0x20000010

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff29 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff3e 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff8e 	bl	8000d34 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5d 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff31 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffa2 	bl	8000d9c <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff feb6 	bl	8000be0 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d008      	beq.n	8000e94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e052      	b.n	8000f3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0216 	bic.w	r2, r2, #22
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <HAL_DMA_Abort+0x62>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d007      	beq.n	8000ed4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0208 	bic.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee4:	e013      	b.n	8000f0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ee6:	f7ff fe7b 	bl	8000be0 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d90c      	bls.n	8000f0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2203      	movs	r2, #3
 8000efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e015      	b.n	8000f3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1e4      	bne.n	8000ee6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f20:	223f      	movs	r2, #63	; 0x3f
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d004      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e00c      	b.n	8000f7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2205      	movs	r2, #5
 8000f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_FLASH_Program+0xa0>)
 8000f9c:	7e1b      	ldrb	r3, [r3, #24]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_FLASH_Program+0x1e>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e03b      	b.n	800101e <HAL_FLASH_Program+0x96>
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <HAL_FLASH_Program+0xa0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb0:	f000 f870 	bl	8001094 <FLASH_WaitForLastOperation>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d12b      	bne.n	8001016 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000fc4:	783b      	ldrb	r3, [r7, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	68b8      	ldr	r0, [r7, #8]
 8000fca:	f000 f91b 	bl	8001204 <FLASH_Program_Byte>
 8000fce:	e016      	b.n	8000ffe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d105      	bne.n	8000fe2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000fd6:	883b      	ldrh	r3, [r7, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	68b8      	ldr	r0, [r7, #8]
 8000fdc:	f000 f8ee 	bl	80011bc <FLASH_Program_HalfWord>
 8000fe0:	e00d      	b.n	8000ffe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d105      	bne.n	8000ff4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	68b8      	ldr	r0, [r7, #8]
 8000fee:	f000 f8c3 	bl	8001178 <FLASH_Program_Word>
 8000ff2:	e004      	b.n	8000ffe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f000 f88b 	bl	8001114 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ffe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001002:	f000 f847 	bl	8001094 <FLASH_WaitForLastOperation>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_FLASH_Program+0xa4>)
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_FLASH_Program+0xa4>)
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_FLASH_Program+0xa0>)
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800101c:	7dfb      	ldrb	r3, [r7, #23]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20002050 	.word	0x20002050
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_FLASH_Unlock+0x38>)
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da0b      	bge.n	800105a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_FLASH_Unlock+0x38>)
 8001044:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_FLASH_Unlock+0x3c>)
 8001046:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <HAL_FLASH_Unlock+0x38>)
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_FLASH_Unlock+0x40>)
 800104c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_FLASH_Unlock+0x38>)
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b00      	cmp	r3, #0
 8001054:	da01      	bge.n	800105a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800105a:	79fb      	ldrb	r3, [r7, #7]
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40023c00 	.word	0x40023c00
 800106c:	45670123 	.word	0x45670123
 8001070:	cdef89ab 	.word	0xcdef89ab

08001074 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_FLASH_Lock+0x1c>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_FLASH_Lock+0x1c>)
 800107e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001082:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40023c00 	.word	0x40023c00

08001094 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <FLASH_WaitForLastOperation+0x78>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80010a6:	f7ff fd9b 	bl	8000be0 <HAL_GetTick>
 80010aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010ac:	e010      	b.n	80010d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d00c      	beq.n	80010d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <FLASH_WaitForLastOperation+0x38>
 80010bc:	f7ff fd90 	bl	8000be0 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d201      	bcs.n	80010d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e019      	b.n	8001104 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e8      	bne.n	80010ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010fa:	f000 f8a5 	bl	8001248 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
  
}  
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20002050 	.word	0x20002050
 8001110:	40023c00 	.word	0x40023c00

08001114 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 8001126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800112a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4a10      	ldr	r2, [pc, #64]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 8001132:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800114a:	f3bf 8f6f 	isb	sy
}
 800114e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001150:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	000a      	movs	r2, r1
 800115e:	2300      	movs	r3, #0
 8001160:	68f9      	ldr	r1, [r7, #12]
 8001162:	3104      	adds	r1, #4
 8001164:	4613      	mov	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40023c00 	.word	0x40023c00

08001178 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <FLASH_Program_Word+0x40>)
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <FLASH_Program_Word+0x40>)
 8001188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800118c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <FLASH_Program_Word+0x40>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <FLASH_Program_Word+0x40>)
 8001194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001198:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <FLASH_Program_Word+0x40>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <FLASH_Program_Word+0x40>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40023c00 	.word	0x40023c00

080011bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	801a      	strh	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <FLASH_Program_Byte+0x40>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <FLASH_Program_Byte+0x40>)
 8001216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800121a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <FLASH_Program_Byte+0x40>)
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <FLASH_Program_Byte+0x40>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <FLASH_Program_Byte+0x40>)
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <FLASH_Program_Byte+0x40>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	78fa      	ldrb	r2, [r7, #3]
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00

08001248 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800124c:	4b27      	ldr	r3, [pc, #156]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 8001262:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 8001266:	2210      	movs	r2, #16
 8001268:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	2b00      	cmp	r3, #0
 8001274:	d008      	beq.n	8001288 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 8001280:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 8001284:	2220      	movs	r2, #32
 8001286:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 800129e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012a2:	2240      	movs	r2, #64	; 0x40
 80012a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d008      	beq.n	80012c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 80012bc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	f043 0320 	orr.w	r3, r3, #32
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 80012da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012de:	2202      	movs	r2, #2
 80012e0:	60da      	str	r2, [r3, #12]
  }
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40023c00 	.word	0x40023c00
 80012f0:	20002050 	.word	0x20002050

080012f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e010      	b.n	8001332 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d103      	bne.n	800131e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e009      	b.n	8001332 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d103      	bne.n	800132c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	e002      	b.n	8001332 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800132c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001330:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 8001338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800133c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	490f      	ldr	r1, [pc, #60]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 8001350:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001354:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4313      	orrs	r3, r2
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <FLASH_Erase_Sector+0x8c>)
 800136e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001372:	6113      	str	r3, [r2, #16]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	e16b      	b.n	8001678 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a0:	2201      	movs	r2, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 815a 	bne.w	8001672 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d005      	beq.n	80013d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d130      	bne.n	8001438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	f003 0201 	and.w	r2, r3, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b03      	cmp	r3, #3
 8001442:	d017      	beq.n	8001474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d123      	bne.n	80014c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	69b9      	ldr	r1, [r7, #24]
 80014c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0203 	and.w	r2, r3, #3
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80b4 	beq.w	8001672 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b60      	ldr	r3, [pc, #384]	; (8001690 <HAL_GPIO_Init+0x30c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a5f      	ldr	r2, [pc, #380]	; (8001690 <HAL_GPIO_Init+0x30c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_GPIO_Init+0x30c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001526:	4a5b      	ldr	r2, [pc, #364]	; (8001694 <HAL_GPIO_Init+0x310>)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_GPIO_Init+0x314>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d02b      	beq.n	80015aa <HAL_GPIO_Init+0x226>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x318>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d025      	beq.n	80015a6 <HAL_GPIO_Init+0x222>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_GPIO_Init+0x31c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01f      	beq.n	80015a2 <HAL_GPIO_Init+0x21e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x320>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d019      	beq.n	800159e <HAL_GPIO_Init+0x21a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4e      	ldr	r2, [pc, #312]	; (80016a8 <HAL_GPIO_Init+0x324>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x216>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4d      	ldr	r2, [pc, #308]	; (80016ac <HAL_GPIO_Init+0x328>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00d      	beq.n	8001596 <HAL_GPIO_Init+0x212>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4c      	ldr	r2, [pc, #304]	; (80016b0 <HAL_GPIO_Init+0x32c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x20e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <HAL_GPIO_Init+0x330>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_GPIO_Init+0x20a>
 800158a:	2307      	movs	r3, #7
 800158c:	e00e      	b.n	80015ac <HAL_GPIO_Init+0x228>
 800158e:	2308      	movs	r3, #8
 8001590:	e00c      	b.n	80015ac <HAL_GPIO_Init+0x228>
 8001592:	2306      	movs	r3, #6
 8001594:	e00a      	b.n	80015ac <HAL_GPIO_Init+0x228>
 8001596:	2305      	movs	r3, #5
 8001598:	e008      	b.n	80015ac <HAL_GPIO_Init+0x228>
 800159a:	2304      	movs	r3, #4
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x228>
 800159e:	2303      	movs	r3, #3
 80015a0:	e004      	b.n	80015ac <HAL_GPIO_Init+0x228>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x228>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x228>
 80015aa:	2300      	movs	r3, #0
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f002 0203 	and.w	r2, r2, #3
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	4093      	lsls	r3, r2
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015bc:	4935      	ldr	r1, [pc, #212]	; (8001694 <HAL_GPIO_Init+0x310>)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HAL_GPIO_Init+0x334>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ee:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <HAL_GPIO_Init+0x334>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015f4:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HAL_GPIO_Init+0x334>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001618:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <HAL_GPIO_Init+0x334>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_GPIO_Init+0x334>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_GPIO_Init+0x334>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_GPIO_Init+0x334>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800166c:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <HAL_GPIO_Init+0x334>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3301      	adds	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	f67f ae90 	bls.w	80013a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40013800 	.word	0x40013800
 8001698:	40020000 	.word	0x40020000
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40021400 	.word	0x40021400
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40021c00 	.word	0x40021c00
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e264      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d075      	beq.n	80017c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016da:	4ba3      	ldr	r3, [pc, #652]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d00c      	beq.n	8001700 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e6:	4ba0      	ldr	r3, [pc, #640]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d112      	bne.n	8001718 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f2:	4b9d      	ldr	r3, [pc, #628]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016fe:	d10b      	bne.n	8001718 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4b99      	ldr	r3, [pc, #612]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d05b      	beq.n	80017c4 <HAL_RCC_OscConfig+0x108>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d157      	bne.n	80017c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e23f      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x74>
 8001722:	4b91      	ldr	r3, [pc, #580]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a90      	ldr	r2, [pc, #576]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e01d      	b.n	800176c <HAL_RCC_OscConfig+0xb0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x98>
 800173a:	4b8b      	ldr	r3, [pc, #556]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a8a      	ldr	r2, [pc, #552]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b88      	ldr	r3, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a87      	ldr	r2, [pc, #540]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0xb0>
 8001754:	4b84      	ldr	r3, [pc, #528]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a83      	ldr	r2, [pc, #524]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a80      	ldr	r2, [pc, #512]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fa34 	bl	8000be0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fa30 	bl	8000be0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e204      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b76      	ldr	r3, [pc, #472]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0xc0>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fa20 	bl	8000be0 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fa1c 	bl	8000be0 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1f0      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	4b6c      	ldr	r3, [pc, #432]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0xe8>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d2:	4b65      	ldr	r3, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017de:	4b62      	ldr	r3, [pc, #392]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d11c      	bne.n	8001824 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ea:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	4b5c      	ldr	r3, [pc, #368]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x152>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e1c4      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4952      	ldr	r1, [pc, #328]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	e03a      	b.n	800189a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182c:	4b4f      	ldr	r3, [pc, #316]	; (800196c <HAL_RCC_OscConfig+0x2b0>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff f9d5 	bl	8000be0 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff f9d1 	bl	8000be0 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1a5      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4940      	ldr	r1, [pc, #256]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_OscConfig+0x2b0>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f9b4 	bl	8000be0 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187c:	f7ff f9b0 	bl	8000be0 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e184      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d030      	beq.n	8001908 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d016      	beq.n	80018dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_RCC_OscConfig+0x2b4>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff f994 	bl	8000be0 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018bc:	f7ff f990 	bl	8000be0 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e164      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x200>
 80018da:	e015      	b.n	8001908 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_RCC_OscConfig+0x2b4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff f97d 	bl	8000be0 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff f979 	bl	8000be0 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e14d      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a0 	beq.w	8001a56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001942:	2301      	movs	r3, #1
 8001944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_OscConfig+0x2b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d121      	bne.n	8001996 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_RCC_OscConfig+0x2b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_RCC_OscConfig+0x2b8>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195e:	f7ff f93f 	bl	8000be0 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	e011      	b.n	800198a <HAL_RCC_OscConfig+0x2ce>
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	42470000 	.word	0x42470000
 8001970:	42470e80 	.word	0x42470e80
 8001974:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001978:	f7ff f932 	bl	8000be0 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e106      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <HAL_RCC_OscConfig+0x4e4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d106      	bne.n	80019ac <HAL_RCC_OscConfig+0x2f0>
 800199e:	4b81      	ldr	r3, [pc, #516]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a80      	ldr	r2, [pc, #512]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	e01c      	b.n	80019e6 <HAL_RCC_OscConfig+0x32a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d10c      	bne.n	80019ce <HAL_RCC_OscConfig+0x312>
 80019b4:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	4a7a      	ldr	r2, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6713      	str	r3, [r2, #112]	; 0x70
 80019c0:	4b78      	ldr	r3, [pc, #480]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4a77      	ldr	r2, [pc, #476]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6713      	str	r3, [r2, #112]	; 0x70
 80019cc:	e00b      	b.n	80019e6 <HAL_RCC_OscConfig+0x32a>
 80019ce:	4b75      	ldr	r3, [pc, #468]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	4a74      	ldr	r2, [pc, #464]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	6713      	str	r3, [r2, #112]	; 0x70
 80019da:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	4a71      	ldr	r2, [pc, #452]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d015      	beq.n	8001a1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff f8f7 	bl	8000be0 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff f8f3 	bl	8000be0 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0c5      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	4b65      	ldr	r3, [pc, #404]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0ee      	beq.n	80019f6 <HAL_RCC_OscConfig+0x33a>
 8001a18:	e014      	b.n	8001a44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f8e1 	bl	8000be0 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff f8dd 	bl	8000be0 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0af      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a38:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ee      	bne.n	8001a22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d105      	bne.n	8001a56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4a:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a55      	ldr	r2, [pc, #340]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 809b 	beq.w	8001b96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d05c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d141      	bne.n	8001af8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a74:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <HAL_RCC_OscConfig+0x4ec>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f8b1 	bl	8000be0 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f8ad 	bl	8000be0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e081      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a94:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69da      	ldr	r2, [r3, #28]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	019b      	lsls	r3, r3, #6
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	061b      	lsls	r3, r3, #24
 8001ac4:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aca:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <HAL_RCC_OscConfig+0x4ec>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f886 	bl	8000be0 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f882 	bl	8000be0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e056      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
 8001af6:	e04e      	b.n	8001b96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_RCC_OscConfig+0x4ec>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff f86f 	bl	8000be0 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff f86b 	bl	8000be0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e03f      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x44a>
 8001b24:	e037      	b.n	8001b96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e032      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d028      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d121      	bne.n	8001b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d11a      	bne.n	8001b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b62:	4013      	ands	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d111      	bne.n	8001b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	085b      	lsrs	r3, r3, #1
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	42470060 	.word	0x42470060

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0cc      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d90c      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0b8      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c00:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	494d      	ldr	r1, [pc, #308]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d044      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d119      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e07f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e067      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4934      	ldr	r1, [pc, #208]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7fe ffa0 	bl	8000be0 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7fe ff9c 	bl	8000be0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e04f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d20c      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e032      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4916      	ldr	r1, [pc, #88]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490e      	ldr	r1, [pc, #56]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d32:	f000 f821 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	490a      	ldr	r1, [pc, #40]	; (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ff00 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	08002fa4 	.word	0x08002fa4
 8001d70:	20000008 	.word	0x20000008
 8001d74:	2000000c 	.word	0x2000000c

08001d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d90:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d00d      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x40>
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	f200 80bd 	bhi.w	8001f1c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x34>
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001daa:	e0b7      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dac:	4b61      	ldr	r3, [pc, #388]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dae:	60bb      	str	r3, [r7, #8]
       break;
 8001db0:	e0b7      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001db2:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001db4:	60bb      	str	r3, [r7, #8]
      break;
 8001db6:	e0b4      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db8:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d04d      	beq.n	8001e6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	ea02 0800 	and.w	r8, r2, r0
 8001de6:	ea03 0901 	and.w	r9, r3, r1
 8001dea:	4640      	mov	r0, r8
 8001dec:	4649      	mov	r1, r9
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	014b      	lsls	r3, r1, #5
 8001df8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dfc:	0142      	lsls	r2, r0, #5
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	ebb0 0008 	subs.w	r0, r0, r8
 8001e06:	eb61 0109 	sbc.w	r1, r1, r9
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	018b      	lsls	r3, r1, #6
 8001e14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e18:	0182      	lsls	r2, r0, #6
 8001e1a:	1a12      	subs	r2, r2, r0
 8001e1c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e20:	f04f 0000 	mov.w	r0, #0
 8001e24:	f04f 0100 	mov.w	r1, #0
 8001e28:	00d9      	lsls	r1, r3, #3
 8001e2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e2e:	00d0      	lsls	r0, r2, #3
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	eb12 0208 	adds.w	r2, r2, r8
 8001e38:	eb43 0309 	adc.w	r3, r3, r9
 8001e3c:	f04f 0000 	mov.w	r0, #0
 8001e40:	f04f 0100 	mov.w	r1, #0
 8001e44:	0259      	lsls	r1, r3, #9
 8001e46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e4a:	0250      	lsls	r0, r2, #9
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	f7fe f9b4 	bl	80001c8 <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e04a      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	461a      	mov	r2, r3
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	ea02 0400 	and.w	r4, r2, r0
 8001e82:	ea03 0501 	and.w	r5, r3, r1
 8001e86:	4620      	mov	r0, r4
 8001e88:	4629      	mov	r1, r5
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	014b      	lsls	r3, r1, #5
 8001e94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e98:	0142      	lsls	r2, r0, #5
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	1b00      	subs	r0, r0, r4
 8001ea0:	eb61 0105 	sbc.w	r1, r1, r5
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	018b      	lsls	r3, r1, #6
 8001eae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eb2:	0182      	lsls	r2, r0, #6
 8001eb4:	1a12      	subs	r2, r2, r0
 8001eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eba:	f04f 0000 	mov.w	r0, #0
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	00d9      	lsls	r1, r3, #3
 8001ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ec8:	00d0      	lsls	r0, r2, #3
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	1912      	adds	r2, r2, r4
 8001ed0:	eb45 0303 	adc.w	r3, r5, r3
 8001ed4:	f04f 0000 	mov.w	r0, #0
 8001ed8:	f04f 0100 	mov.w	r1, #0
 8001edc:	0299      	lsls	r1, r3, #10
 8001ede:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ee2:	0290      	lsls	r0, r2, #10
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	f7fe f968 	bl	80001c8 <__aeabi_uldivmod>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4613      	mov	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	60bb      	str	r3, [r7, #8]
      break;
 8001f1a:	e002      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f1e:	60bb      	str	r3, [r7, #8]
      break;
 8001f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f22:	68bb      	ldr	r3, [r7, #8]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	00f42400 	.word	0x00f42400
 8001f38:	007a1200 	.word	0x007a1200

08001f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008

08001f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f58:	f7ff fff0 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	0a9b      	lsrs	r3, r3, #10
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	4903      	ldr	r1, [pc, #12]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6a:	5ccb      	ldrb	r3, [r1, r3]
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	08002fb4 	.word	0x08002fb4

08001f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f80:	f7ff ffdc 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0b5b      	lsrs	r3, r3, #13
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4903      	ldr	r1, [pc, #12]	; (8001fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	08002fb4 	.word	0x08002fb4

08001fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e03f      	b.n	8002036 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fce2 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2224      	movs	r2, #36	; 0x24
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fddb 	bl	8002ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800200c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800201c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b08a      	sub	sp, #40	; 0x28
 8002042:	af02      	add	r7, sp, #8
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b20      	cmp	r3, #32
 800205c:	d17c      	bne.n	8002158 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_UART_Transmit+0x2c>
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e075      	b.n	800215a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_UART_Transmit+0x3e>
 8002078:	2302      	movs	r3, #2
 800207a:	e06e      	b.n	800215a <HAL_UART_Transmit+0x11c>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2221      	movs	r2, #33	; 0x21
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002092:	f7fe fda5 	bl	8000be0 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ac:	d108      	bne.n	80020c0 <HAL_UART_Transmit+0x82>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d104      	bne.n	80020c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e003      	b.n	80020c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020d0:	e02a      	b.n	8002128 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2200      	movs	r2, #0
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 fb1f 	bl	8002720 <UART_WaitOnFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e036      	b.n	800215a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10b      	bne.n	800210a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	3302      	adds	r3, #2
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	e007      	b.n	800211a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	3301      	adds	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1cf      	bne.n	80020d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2200      	movs	r2, #0
 800213a:	2140      	movs	r1, #64	; 0x40
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 faef 	bl	8002720 <UART_WaitOnFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e006      	b.n	800215a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e000      	b.n	800215a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b20      	cmp	r3, #32
 800217a:	d11d      	bne.n	80021b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_UART_Receive_IT+0x26>
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e016      	b.n	80021ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_UART_Receive_IT+0x38>
 8002196:	2302      	movs	r3, #2
 8002198:	e00f      	b.n	80021ba <HAL_UART_Receive_IT+0x58>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fb24 	bl	80027fc <UART_Start_Receive_IT>
 80021b4:	4603      	mov	r3, r0
 80021b6:	e000      	b.n	80021ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0ba      	sub	sp, #232	; 0xe8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800220a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_UART_IRQHandler+0x66>
 8002216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fc03 	bl	8002a2e <UART_Receive_IT>
      return;
 8002228:	e256      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800222a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80de 	beq.w	80023f0 <HAL_UART_IRQHandler+0x22c>
 8002234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002244:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80d1 	beq.w	80023f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800224e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_UART_IRQHandler+0xae>
 800225a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_UART_IRQHandler+0xd2>
 800227e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_UART_IRQHandler+0xf6>
 80022a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0204 	orr.w	r2, r3, #4
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <HAL_UART_IRQHandler+0x126>
 80022c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0208 	orr.w	r2, r3, #8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 81ed 	beq.w	80026ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_UART_IRQHandler+0x14e>
 8002300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fb8e 	bl	8002a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b40      	cmp	r3, #64	; 0x40
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_UART_IRQHandler+0x17a>
 8002336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800233a:	2b00      	cmp	r3, #0
 800233c:	d04f      	beq.n	80023de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa96 	bl	8002870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d141      	bne.n	80023d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3314      	adds	r3, #20
 8002358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002360:	e853 3f00 	ldrex	r3, [r3]
 8002364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800236c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3314      	adds	r3, #20
 800237a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800237e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800238a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800238e:	e841 2300 	strex	r3, r2, [r1]
 8002392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1d9      	bne.n	8002352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d013      	beq.n	80023ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	4a7d      	ldr	r2, [pc, #500]	; (80025a0 <HAL_UART_IRQHandler+0x3dc>)
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fdc5 	bl	8000f42 <HAL_DMA_Abort_IT>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d016      	beq.n	80023ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023c8:	4610      	mov	r0, r2
 80023ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023cc:	e00e      	b.n	80023ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f990 	bl	80026f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d4:	e00a      	b.n	80023ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f98c 	bl	80026f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	e006      	b.n	80023ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f988 	bl	80026f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023ea:	e170      	b.n	80026ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ec:	bf00      	nop
    return;
 80023ee:	e16e      	b.n	80026ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	f040 814a 	bne.w	800268e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8143 	beq.w	800268e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 813c 	beq.w	800268e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	f040 80b4 	bne.w	80025a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8140 	beq.w	80026d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800245a:	429a      	cmp	r2, r3
 800245c:	f080 8139 	bcs.w	80026d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002466:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002472:	f000 8088 	beq.w	8002586 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	330c      	adds	r3, #12
 800247c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002484:	e853 3f00 	ldrex	r3, [r3]
 8002488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800248c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024b2:	e841 2300 	strex	r3, r2, [r1]
 80024b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1d9      	bne.n	8002476 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3314      	adds	r3, #20
 80024c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024cc:	e853 3f00 	ldrex	r3, [r3]
 80024d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024f2:	e841 2300 	strex	r3, r2, [r1]
 80024f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e1      	bne.n	80024c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3314      	adds	r3, #20
 8002504:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002508:	e853 3f00 	ldrex	r3, [r3]
 800250c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800250e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3314      	adds	r3, #20
 800251e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002522:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002524:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002526:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800252a:	e841 2300 	strex	r3, r2, [r1]
 800252e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e3      	bne.n	80024fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002556:	f023 0310 	bic.w	r3, r3, #16
 800255a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	330c      	adds	r3, #12
 8002564:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002568:	65ba      	str	r2, [r7, #88]	; 0x58
 800256a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800256e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002570:	e841 2300 	strex	r3, r2, [r1]
 8002574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e3      	bne.n	8002544 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fc6e 	bl	8000e62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800258e:	b29b      	uxth	r3, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	b29b      	uxth	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8b6 	bl	8002708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800259c:	e099      	b.n	80026d2 <HAL_UART_IRQHandler+0x50e>
 800259e:	bf00      	nop
 80025a0:	08002937 	.word	0x08002937
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 808b 	beq.w	80026d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8086 	beq.w	80026d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	330c      	adds	r3, #12
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025ee:	647a      	str	r2, [r7, #68]	; 0x44
 80025f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025f6:	e841 2300 	strex	r3, r2, [r1]
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e3      	bne.n	80025ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3314      	adds	r3, #20
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	623b      	str	r3, [r7, #32]
   return(result);
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3314      	adds	r3, #20
 8002622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002626:	633a      	str	r2, [r7, #48]	; 0x30
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800262c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e3      	bne.n	8002602 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	e853 3f00 	ldrex	r3, [r3]
 8002656:	60fb      	str	r3, [r7, #12]
   return(result);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0310 	bic.w	r3, r3, #16
 800265e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800266c:	61fa      	str	r2, [r7, #28]
 800266e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	69b9      	ldr	r1, [r7, #24]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	617b      	str	r3, [r7, #20]
   return(result);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e3      	bne.n	8002648 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f83e 	bl	8002708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800268c:	e023      	b.n	80026d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800268e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_UART_IRQHandler+0x4ea>
 800269a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f959 	bl	800295e <UART_Transmit_IT>
    return;
 80026ac:	e014      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <HAL_UART_IRQHandler+0x514>
 80026ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f999 	bl	80029fe <UART_EndTransmit_IT>
    return;
 80026cc:	e004      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
    return;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
      return;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <HAL_UART_IRQHandler+0x514>
      return;
 80026d6:	bf00      	nop
  }
}
 80026d8:	37e8      	adds	r7, #232	; 0xe8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop

080026e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b090      	sub	sp, #64	; 0x40
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002730:	e050      	b.n	80027d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d04c      	beq.n	80027d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800273a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <UART_WaitOnFlagUntilTimeout+0x30>
 8002740:	f7fe fa4e 	bl	8000be0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800274c:	429a      	cmp	r2, r3
 800274e:	d241      	bcs.n	80027d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	e853 3f00 	ldrex	r3, [r3]
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	330c      	adds	r3, #12
 800276e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002770:	637a      	str	r2, [r7, #52]	; 0x34
 8002772:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002774:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002778:	e841 2300 	strex	r3, r2, [r1]
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e5      	bne.n	8002750 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	e853 3f00 	ldrex	r3, [r3]
 8002792:	613b      	str	r3, [r7, #16]
   return(result);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	63bb      	str	r3, [r7, #56]	; 0x38
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027a4:	623a      	str	r2, [r7, #32]
 80027a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	69f9      	ldr	r1, [r7, #28]
 80027aa:	6a3a      	ldr	r2, [r7, #32]
 80027ac:	e841 2300 	strex	r3, r2, [r1]
 80027b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e5      	bne.n	8002784 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e00f      	b.n	80027f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d09f      	beq.n	8002732 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3740      	adds	r7, #64	; 0x40
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	88fa      	ldrh	r2, [r7, #6]
 8002814:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2222      	movs	r2, #34	; 0x22
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002840:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0220 	orr.w	r2, r2, #32
 8002860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b095      	sub	sp, #84	; 0x54
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	e853 3f00 	ldrex	r3, [r3]
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800288e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002898:	643a      	str	r2, [r7, #64]	; 0x40
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800289e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028a0:	e841 2300 	strex	r3, r2, [r1]
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e5      	bne.n	8002878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	e853 3f00 	ldrex	r3, [r3]
 80028ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3314      	adds	r3, #20
 80028ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d4:	e841 2300 	strex	r3, r2, [r1]
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e5      	bne.n	80028ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d119      	bne.n	800291c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f023 0310 	bic.w	r3, r3, #16
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002908:	61ba      	str	r2, [r7, #24]
 800290a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	6979      	ldr	r1, [r7, #20]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	613b      	str	r3, [r7, #16]
   return(result);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
}
 800292a:	bf00      	nop
 800292c:	3754      	adds	r7, #84	; 0x54
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff fecf 	bl	80026f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b21      	cmp	r3, #33	; 0x21
 8002970:	d13e      	bne.n	80029f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297a:	d114      	bne.n	80029a6 <UART_Transmit_IT+0x48>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d110      	bne.n	80029a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	1c9a      	adds	r2, r3, #2
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	621a      	str	r2, [r3, #32]
 80029a4:	e008      	b.n	80029b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	1c59      	adds	r1, r3, #1
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6211      	str	r1, [r2, #32]
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4619      	mov	r1, r3
 80029c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10f      	bne.n	80029ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fe5e 	bl	80026e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b08c      	sub	sp, #48	; 0x30
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b22      	cmp	r3, #34	; 0x22
 8002a40:	f040 80ab 	bne.w	8002b9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4c:	d117      	bne.n	8002a7e <UART_Receive_IT+0x50>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	1c9a      	adds	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a7c:	e026      	b.n	8002acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a90:	d007      	beq.n	8002aa2 <UART_Receive_IT+0x74>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <UART_Receive_IT+0x82>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e008      	b.n	8002ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d15a      	bne.n	8002b96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0220 	bic.w	r2, r2, #32
 8002aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d135      	bne.n	8002b8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	e853 3f00 	ldrex	r3, [r3]
 8002b34:	613b      	str	r3, [r7, #16]
   return(result);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f023 0310 	bic.w	r3, r3, #16
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	330c      	adds	r3, #12
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	623a      	str	r2, [r7, #32]
 8002b48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4a:	69f9      	ldr	r1, [r7, #28]
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1e5      	bne.n	8002b26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d10a      	bne.n	8002b7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fdbf 	bl	8002708 <HAL_UARTEx_RxEventCallback>
 8002b8a:	e002      	b.n	8002b92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fd fd55 	bl	800063c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e002      	b.n	8002b9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
  }
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3730      	adds	r7, #48	; 0x30
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba8:	b09f      	sub	sp, #124	; 0x7c
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bba:	68d9      	ldr	r1, [r3, #12]
 8002bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	ea40 0301 	orr.w	r3, r0, r1
 8002bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002be8:	f021 010c 	bic.w	r1, r1, #12
 8002bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c02:	6999      	ldr	r1, [r3, #24]
 8002c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	ea40 0301 	orr.w	r3, r0, r1
 8002c0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4bc5      	ldr	r3, [pc, #788]	; (8002f28 <UART_SetConfig+0x384>)
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d004      	beq.n	8002c22 <UART_SetConfig+0x7e>
 8002c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4bc3      	ldr	r3, [pc, #780]	; (8002f2c <UART_SetConfig+0x388>)
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d103      	bne.n	8002c2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c22:	f7ff f9ab 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 8002c26:	6778      	str	r0, [r7, #116]	; 0x74
 8002c28:	e002      	b.n	8002c30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c2a:	f7ff f993 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8002c2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c38:	f040 80b6 	bne.w	8002da8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c3e:	461c      	mov	r4, r3
 8002c40:	f04f 0500 	mov.w	r5, #0
 8002c44:	4622      	mov	r2, r4
 8002c46:	462b      	mov	r3, r5
 8002c48:	1891      	adds	r1, r2, r2
 8002c4a:	6439      	str	r1, [r7, #64]	; 0x40
 8002c4c:	415b      	adcs	r3, r3
 8002c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c54:	1912      	adds	r2, r2, r4
 8002c56:	eb45 0303 	adc.w	r3, r5, r3
 8002c5a:	f04f 0000 	mov.w	r0, #0
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	00d9      	lsls	r1, r3, #3
 8002c64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c68:	00d0      	lsls	r0, r2, #3
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	1911      	adds	r1, r2, r4
 8002c70:	6639      	str	r1, [r7, #96]	; 0x60
 8002c72:	416b      	adcs	r3, r5
 8002c74:	667b      	str	r3, [r7, #100]	; 0x64
 8002c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	1891      	adds	r1, r2, r2
 8002c82:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c84:	415b      	adcs	r3, r3
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c90:	f7fd fa9a 	bl	80001c8 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4ba5      	ldr	r3, [pc, #660]	; (8002f30 <UART_SetConfig+0x38c>)
 8002c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	011e      	lsls	r6, r3, #4
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca4:	461c      	mov	r4, r3
 8002ca6:	f04f 0500 	mov.w	r5, #0
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cba:	1912      	adds	r2, r2, r4
 8002cbc:	eb45 0303 	adc.w	r3, r5, r3
 8002cc0:	f04f 0000 	mov.w	r0, #0
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	00d9      	lsls	r1, r3, #3
 8002cca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cce:	00d0      	lsls	r0, r2, #3
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	1911      	adds	r1, r2, r4
 8002cd6:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cd8:	416b      	adcs	r3, r5
 8002cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	1891      	adds	r1, r2, r2
 8002ce8:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cea:	415b      	adcs	r3, r3
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cf2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002cf6:	f7fd fa67 	bl	80001c8 <__aeabi_uldivmod>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4b8c      	ldr	r3, [pc, #560]	; (8002f30 <UART_SetConfig+0x38c>)
 8002d00:	fba3 1302 	umull	r1, r3, r3, r2
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	2164      	movs	r1, #100	; 0x64
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	3332      	adds	r3, #50	; 0x32
 8002d12:	4a87      	ldr	r2, [pc, #540]	; (8002f30 <UART_SetConfig+0x38c>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d20:	441e      	add	r6, r3
 8002d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d24:	4618      	mov	r0, r3
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	1894      	adds	r4, r2, r2
 8002d30:	623c      	str	r4, [r7, #32]
 8002d32:	415b      	adcs	r3, r3
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d3a:	1812      	adds	r2, r2, r0
 8002d3c:	eb41 0303 	adc.w	r3, r1, r3
 8002d40:	f04f 0400 	mov.w	r4, #0
 8002d44:	f04f 0500 	mov.w	r5, #0
 8002d48:	00dd      	lsls	r5, r3, #3
 8002d4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d4e:	00d4      	lsls	r4, r2, #3
 8002d50:	4622      	mov	r2, r4
 8002d52:	462b      	mov	r3, r5
 8002d54:	1814      	adds	r4, r2, r0
 8002d56:	653c      	str	r4, [r7, #80]	; 0x50
 8002d58:	414b      	adcs	r3, r1
 8002d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	1891      	adds	r1, r2, r2
 8002d68:	61b9      	str	r1, [r7, #24]
 8002d6a:	415b      	adcs	r3, r3
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d76:	f7fd fa27 	bl	80001c8 <__aeabi_uldivmod>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4b6c      	ldr	r3, [pc, #432]	; (8002f30 <UART_SetConfig+0x38c>)
 8002d80:	fba3 1302 	umull	r1, r3, r3, r2
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	2164      	movs	r1, #100	; 0x64
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3332      	adds	r3, #50	; 0x32
 8002d92:	4a67      	ldr	r2, [pc, #412]	; (8002f30 <UART_SetConfig+0x38c>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	f003 0207 	and.w	r2, r3, #7
 8002d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4432      	add	r2, r6
 8002da4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002da6:	e0b9      	b.n	8002f1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002daa:	461c      	mov	r4, r3
 8002dac:	f04f 0500 	mov.w	r5, #0
 8002db0:	4622      	mov	r2, r4
 8002db2:	462b      	mov	r3, r5
 8002db4:	1891      	adds	r1, r2, r2
 8002db6:	6139      	str	r1, [r7, #16]
 8002db8:	415b      	adcs	r3, r3
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dc0:	1912      	adds	r2, r2, r4
 8002dc2:	eb45 0303 	adc.w	r3, r5, r3
 8002dc6:	f04f 0000 	mov.w	r0, #0
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	00d9      	lsls	r1, r3, #3
 8002dd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dd4:	00d0      	lsls	r0, r2, #3
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	eb12 0804 	adds.w	r8, r2, r4
 8002dde:	eb43 0905 	adc.w	r9, r3, r5
 8002de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f04f 0100 	mov.w	r1, #0
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	008b      	lsls	r3, r1, #2
 8002df6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002dfa:	0082      	lsls	r2, r0, #2
 8002dfc:	4640      	mov	r0, r8
 8002dfe:	4649      	mov	r1, r9
 8002e00:	f7fd f9e2 	bl	80001c8 <__aeabi_uldivmod>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <UART_SetConfig+0x38c>)
 8002e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	011e      	lsls	r6, r3, #4
 8002e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e14:	4618      	mov	r0, r3
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	1894      	adds	r4, r2, r2
 8002e20:	60bc      	str	r4, [r7, #8]
 8002e22:	415b      	adcs	r3, r3
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e2a:	1812      	adds	r2, r2, r0
 8002e2c:	eb41 0303 	adc.w	r3, r1, r3
 8002e30:	f04f 0400 	mov.w	r4, #0
 8002e34:	f04f 0500 	mov.w	r5, #0
 8002e38:	00dd      	lsls	r5, r3, #3
 8002e3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e3e:	00d4      	lsls	r4, r2, #3
 8002e40:	4622      	mov	r2, r4
 8002e42:	462b      	mov	r3, r5
 8002e44:	1814      	adds	r4, r2, r0
 8002e46:	64bc      	str	r4, [r7, #72]	; 0x48
 8002e48:	414b      	adcs	r3, r1
 8002e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	008b      	lsls	r3, r1, #2
 8002e60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e64:	0082      	lsls	r2, r0, #2
 8002e66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e6a:	f7fd f9ad 	bl	80001c8 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <UART_SetConfig+0x38c>)
 8002e74:	fba3 1302 	umull	r1, r3, r3, r2
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	2164      	movs	r1, #100	; 0x64
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	3332      	adds	r3, #50	; 0x32
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <UART_SetConfig+0x38c>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e92:	441e      	add	r6, r3
 8002e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e96:	4618      	mov	r0, r3
 8002e98:	f04f 0100 	mov.w	r1, #0
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	1894      	adds	r4, r2, r2
 8002ea2:	603c      	str	r4, [r7, #0]
 8002ea4:	415b      	adcs	r3, r3
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eac:	1812      	adds	r2, r2, r0
 8002eae:	eb41 0303 	adc.w	r3, r1, r3
 8002eb2:	f04f 0400 	mov.w	r4, #0
 8002eb6:	f04f 0500 	mov.w	r5, #0
 8002eba:	00dd      	lsls	r5, r3, #3
 8002ebc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ec0:	00d4      	lsls	r4, r2, #3
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	eb12 0a00 	adds.w	sl, r2, r0
 8002eca:	eb43 0b01 	adc.w	fp, r3, r1
 8002ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	008b      	lsls	r3, r1, #2
 8002ee2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ee6:	0082      	lsls	r2, r0, #2
 8002ee8:	4650      	mov	r0, sl
 8002eea:	4659      	mov	r1, fp
 8002eec:	f7fd f96c 	bl	80001c8 <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <UART_SetConfig+0x38c>)
 8002ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2164      	movs	r1, #100	; 0x64
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	3332      	adds	r3, #50	; 0x32
 8002f08:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <UART_SetConfig+0x38c>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4432      	add	r2, r6
 8002f1a:	609a      	str	r2, [r3, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	377c      	adds	r7, #124	; 0x7c
 8002f20:	46bd      	mov	sp, r7
 8002f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f26:	bf00      	nop
 8002f28:	40011000 	.word	0x40011000
 8002f2c:	40011400 	.word	0x40011400
 8002f30:	51eb851f 	.word	0x51eb851f

08002f34 <__libc_init_array>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	4d0d      	ldr	r5, [pc, #52]	; (8002f6c <__libc_init_array+0x38>)
 8002f38:	4c0d      	ldr	r4, [pc, #52]	; (8002f70 <__libc_init_array+0x3c>)
 8002f3a:	1b64      	subs	r4, r4, r5
 8002f3c:	10a4      	asrs	r4, r4, #2
 8002f3e:	2600      	movs	r6, #0
 8002f40:	42a6      	cmp	r6, r4
 8002f42:	d109      	bne.n	8002f58 <__libc_init_array+0x24>
 8002f44:	4d0b      	ldr	r5, [pc, #44]	; (8002f74 <__libc_init_array+0x40>)
 8002f46:	4c0c      	ldr	r4, [pc, #48]	; (8002f78 <__libc_init_array+0x44>)
 8002f48:	f000 f820 	bl	8002f8c <_init>
 8002f4c:	1b64      	subs	r4, r4, r5
 8002f4e:	10a4      	asrs	r4, r4, #2
 8002f50:	2600      	movs	r6, #0
 8002f52:	42a6      	cmp	r6, r4
 8002f54:	d105      	bne.n	8002f62 <__libc_init_array+0x2e>
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5c:	4798      	blx	r3
 8002f5e:	3601      	adds	r6, #1
 8002f60:	e7ee      	b.n	8002f40 <__libc_init_array+0xc>
 8002f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f66:	4798      	blx	r3
 8002f68:	3601      	adds	r6, #1
 8002f6a:	e7f2      	b.n	8002f52 <__libc_init_array+0x1e>
 8002f6c:	08002fc4 	.word	0x08002fc4
 8002f70:	08002fc4 	.word	0x08002fc4
 8002f74:	08002fc4 	.word	0x08002fc4
 8002f78:	08002fc8 	.word	0x08002fc8

08002f7c <memset>:
 8002f7c:	4402      	add	r2, r0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <_init>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr

08002f98 <_fini>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr
